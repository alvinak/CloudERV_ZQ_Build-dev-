/* soapStub.h
   Generated by gSOAP 2.8.17r from ImageViewerAutomation.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://www.Zhoban.com/imageViewer/automation/Imports"
#define SOAP_NAMESPACE_OF_ns2	"http://www.Zhoban.com/imageViewer/automation"
#define SOAP_NAMESPACE_OF_ns3	"http://schemas.microsoft.com/2003/10/Serialization/"
#define SOAP_NAMESPACE_OF_ns4	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
#define SOAP_NAMESPACE_OF_ns5	"http://www.Zhoban.com/dicom/query"
#define SOAP_NAMESPACE_OF_ns6	"http://www.Zhoban.com/dicom"
#define SOAP_NAMESPACE_OF_ns7	"http://www.Zhoban.com/dicom/query/Imports"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (11)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (8)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (12)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique type id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__ID_
#define SOAP_TYPE_xsd__ID_ (19)
/* Primitive xsd:ID schema type: */
class SOAP_CMAC xsd__ID_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 19; } /* = unique type id SOAP_TYPE_xsd__ID_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__ID_() { xsd__ID_::soap_default(NULL); }
	virtual ~xsd__ID_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__IDREF_
#define SOAP_TYPE_xsd__IDREF_ (21)
/* Primitive xsd:IDREF schema type: */
class SOAP_CMAC xsd__IDREF_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 21; } /* = unique type id SOAP_TYPE_xsd__IDREF_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__IDREF_() { xsd__IDREF_::soap_default(NULL); }
	virtual ~xsd__IDREF_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (22)
/* Primitive xsd:QName schema type: */
class SOAP_CMAC xsd__QName_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 22; } /* = unique type id SOAP_TYPE_xsd__QName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__QName_() { xsd__QName_::soap_default(NULL); }
	virtual ~xsd__QName_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (24)
/* Primitive xsd:anyURI schema type: */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 24; } /* = unique type id SOAP_TYPE_xsd__anyURI_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyURI_() { xsd__anyURI_::soap_default(NULL); }
	virtual ~xsd__anyURI_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (25)
/* Primitive xsd:base64Binary schema type: */
class SOAP_CMAC xsd__base64Binary_ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 25; } /* = unique type id SOAP_TYPE_xsd__base64Binary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary_() { xsd__base64Binary_::soap_default(NULL); }
	virtual ~xsd__base64Binary_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (26)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 26; } /* = unique type id SOAP_TYPE_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() { xsd__boolean::soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_xsd__byte_
#define SOAP_TYPE_xsd__byte_ (28)
/* Primitive xsd:byte schema type: */
class SOAP_CMAC xsd__byte_ : public xsd__anyType
{
public:
	char __item;
public:
	virtual int soap_type() const { return 28; } /* = unique type id SOAP_TYPE_xsd__byte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__byte_() { xsd__byte_::soap_default(NULL); }
	virtual ~xsd__byte_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (29)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 29; } /* = unique type id SOAP_TYPE_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() { xsd__dateTime::soap_default(NULL); }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_xsd__decimal_
#define SOAP_TYPE_xsd__decimal_ (32)
/* Primitive xsd:decimal schema type: */
class SOAP_CMAC xsd__decimal_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 32; } /* = unique type id SOAP_TYPE_xsd__decimal_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__decimal_() { xsd__decimal_::soap_default(NULL); }
	virtual ~xsd__decimal_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (33)
/* Primitive xsd:double schema type: */
class SOAP_CMAC xsd__double : public xsd__anyType
{
public:
	double __item;
public:
	virtual int soap_type() const { return 33; } /* = unique type id SOAP_TYPE_xsd__double */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__double() { xsd__double::soap_default(NULL); }
	virtual ~xsd__double() { }
};
#endif

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (36)
/* Primitive xsd:duration schema type: */
class SOAP_CMAC xsd__duration_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 36; } /* = unique type id SOAP_TYPE_xsd__duration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__duration_() { xsd__duration_::soap_default(NULL); }
	virtual ~xsd__duration_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (37)
/* Primitive xsd:float schema type: */
class SOAP_CMAC xsd__float : public xsd__anyType
{
public:
	float __item;
public:
	virtual int soap_type() const { return 37; } /* = unique type id SOAP_TYPE_xsd__float */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__float() { xsd__float::soap_default(NULL); }
	virtual ~xsd__float() { }
};
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (39)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 39; } /* = unique type id SOAP_TYPE_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() { xsd__int::soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (40)
/* Primitive xsd:long schema type: */
class SOAP_CMAC xsd__long : public xsd__anyType
{
public:
	LONG64 __item;
public:
	virtual int soap_type() const { return 40; } /* = unique type id SOAP_TYPE_xsd__long */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__long() { xsd__long::soap_default(NULL); }
	virtual ~xsd__long() { }
};
#endif

#ifndef SOAP_TYPE_xsd__short
#define SOAP_TYPE_xsd__short (42)
/* Primitive xsd:short schema type: */
class SOAP_CMAC xsd__short : public xsd__anyType
{
public:
	short __item;
public:
	virtual int soap_type() const { return 42; } /* = unique type id SOAP_TYPE_xsd__short */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__short() { xsd__short::soap_default(NULL); }
	virtual ~xsd__short() { }
};
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (44)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 44; } /* = unique type id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte_
#define SOAP_TYPE_xsd__unsignedByte_ (45)
/* Primitive xsd:unsignedByte schema type: */
class SOAP_CMAC xsd__unsignedByte_ : public xsd__anyType
{
public:
	unsigned char __item;
public:
	virtual int soap_type() const { return 45; } /* = unique type id SOAP_TYPE_xsd__unsignedByte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedByte_() { xsd__unsignedByte_::soap_default(NULL); }
	virtual ~xsd__unsignedByte_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt
#define SOAP_TYPE_xsd__unsignedInt (46)
/* Primitive xsd:unsignedInt schema type: */
class SOAP_CMAC xsd__unsignedInt : public xsd__anyType
{
public:
	unsigned int __item;
public:
	virtual int soap_type() const { return 46; } /* = unique type id SOAP_TYPE_xsd__unsignedInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedInt() { xsd__unsignedInt::soap_default(NULL); }
	virtual ~xsd__unsignedInt() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedLong
#define SOAP_TYPE_xsd__unsignedLong (47)
/* Primitive xsd:unsignedLong schema type: */
class SOAP_CMAC xsd__unsignedLong : public xsd__anyType
{
public:
	ULONG64 __item;
public:
	virtual int soap_type() const { return 47; } /* = unique type id SOAP_TYPE_xsd__unsignedLong */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedLong() { xsd__unsignedLong::soap_default(NULL); }
	virtual ~xsd__unsignedLong() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedShort
#define SOAP_TYPE_xsd__unsignedShort (49)
/* Primitive xsd:unsignedShort schema type: */
class SOAP_CMAC xsd__unsignedShort : public xsd__anyType
{
public:
	unsigned short __item;
public:
	virtual int soap_type() const { return 49; } /* = unique type id SOAP_TYPE_xsd__unsignedShort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedShort() { xsd__unsignedShort::soap_default(NULL); }
	virtual ~xsd__unsignedShort() { }
};
#endif

#ifndef SOAP_TYPE_ns3__char__
#define SOAP_TYPE_ns3__char__ (107)
/* Primitive ns3:char schema type: */
class SOAP_CMAC ns3__char__ : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 107; } /* = unique type id SOAP_TYPE_ns3__char__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__char__() { ns3__char__::soap_default(NULL); }
	virtual ~ns3__char__() { }
};
#endif

#ifndef SOAP_TYPE_ns3__duration__
#define SOAP_TYPE_ns3__duration__ (109)
/* Primitive ns3:duration schema type: */
class SOAP_CMAC ns3__duration__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 109; } /* = unique type id SOAP_TYPE_ns3__duration__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__duration__() { ns3__duration__::soap_default(NULL); }
	virtual ~ns3__duration__() { }
};
#endif

#ifndef SOAP_TYPE_ns3__guid__
#define SOAP_TYPE_ns3__guid__ (111)
/* Primitive ns3:guid schema type: */
class SOAP_CMAC ns3__guid__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 111; } /* = unique type id SOAP_TYPE_ns3__guid__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__guid__() { ns3__guid__::soap_default(NULL); }
	virtual ~ns3__guid__() { }
};
#endif

#ifndef SOAP_TYPE_ns2__OpenFilesRequest
#define SOAP_TYPE_ns2__OpenFilesRequest (51)
/* ns2:OpenFilesRequest */
class SOAP_CMAC ns2__OpenFilesRequest : public xsd__anyType
{
public:
	class ns4__ArrayOfstring *Files;	/* optional element of type ns4:ArrayOfstring */
	bool *ReportFaultToUser;	/* optional element of type xsd:boolean */
	bool *WaitForFilesToOpen;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 51; } /* = unique type id SOAP_TYPE_ns2__OpenFilesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__OpenFilesRequest() { ns2__OpenFilesRequest::soap_default(NULL); }
	virtual ~ns2__OpenFilesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns2__OpenFilesResult
#define SOAP_TYPE_ns2__OpenFilesResult (52)
/* ns2:OpenFilesResult */
class SOAP_CMAC ns2__OpenFilesResult : public xsd__anyType
{
public:
	class ns2__Viewer *Viewer;	/* optional element of type ns2:Viewer */
public:
	virtual int soap_type() const { return 52; } /* = unique type id SOAP_TYPE_ns2__OpenFilesResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__OpenFilesResult() { ns2__OpenFilesResult::soap_default(NULL); }
	virtual ~ns2__OpenFilesResult() { }
};
#endif

#ifndef SOAP_TYPE_ns2__Viewer
#define SOAP_TYPE_ns2__Viewer (53)
/* ns2:Viewer */
class SOAP_CMAC ns2__Viewer : public xsd__anyType
{
public:
	std::string Identifier;	/* required element of type ns3:guid */
	class ns5__StudyRootStudyIdentifier *PrimaryStudyIdentifier;	/* optional element of type ns5:StudyRootStudyIdentifier */
public:
	virtual int soap_type() const { return 53; } /* = unique type id SOAP_TYPE_ns2__Viewer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__Viewer() { ns2__Viewer::soap_default(NULL); }
	virtual ~ns2__Viewer() { }
};
#endif

#ifndef SOAP_TYPE_ns2__OpenFilesFault
#define SOAP_TYPE_ns2__OpenFilesFault (54)
/* ns2:OpenFilesFault */
class SOAP_CMAC ns2__OpenFilesFault : public xsd__anyType
{
public:
	std::string *FailureDescription;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 54; } /* = unique type id SOAP_TYPE_ns2__OpenFilesFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__OpenFilesFault() { ns2__OpenFilesFault::soap_default(NULL); }
	virtual ~ns2__OpenFilesFault() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GetViewersRequest
#define SOAP_TYPE_ns2__GetViewersRequest (55)
/* Primitive ns2:GetViewersRequest schema type: */
class SOAP_CMAC ns2__GetViewersRequest : public xsd__anyType
{
public:
	virtual int soap_type() const { return 55; } /* = unique type id SOAP_TYPE_ns2__GetViewersRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GetViewersRequest() { ns2__GetViewersRequest::soap_default(NULL); }
	virtual ~ns2__GetViewersRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GetViewersResult
#define SOAP_TYPE_ns2__GetViewersResult (56)
/* ns2:GetViewersResult */
class SOAP_CMAC ns2__GetViewersResult : public xsd__anyType
{
public:
	class ns2__ArrayOfViewer *Viewers;	/* optional element of type ns2:ArrayOfViewer */
public:
	virtual int soap_type() const { return 56; } /* = unique type id SOAP_TYPE_ns2__GetViewersResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GetViewersResult() { ns2__GetViewersResult::soap_default(NULL); }
	virtual ~ns2__GetViewersResult() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ArrayOfViewer
#define SOAP_TYPE_ns2__ArrayOfViewer (57)
/* ns2:ArrayOfViewer */
class SOAP_CMAC ns2__ArrayOfViewer : public xsd__anyType
{
public:
	std::vector<ns2__Viewer * >Viewer;	/* optional element of type ns2:Viewer */
public:
	virtual int soap_type() const { return 57; } /* = unique type id SOAP_TYPE_ns2__ArrayOfViewer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ArrayOfViewer() { ns2__ArrayOfViewer::soap_default(NULL); }
	virtual ~ns2__ArrayOfViewer() { }
};
#endif

#ifndef SOAP_TYPE_ns2__NoViewersFault
#define SOAP_TYPE_ns2__NoViewersFault (58)
/* Primitive ns2:NoViewersFault schema type: */
class SOAP_CMAC ns2__NoViewersFault : public xsd__anyType
{
public:
	virtual int soap_type() const { return 58; } /* = unique type id SOAP_TYPE_ns2__NoViewersFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__NoViewersFault() { ns2__NoViewersFault::soap_default(NULL); }
	virtual ~ns2__NoViewersFault() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GetActiveViewersResult
#define SOAP_TYPE_ns2__GetActiveViewersResult (59)
/* ns2:GetActiveViewersResult */
class SOAP_CMAC ns2__GetActiveViewersResult : public xsd__anyType
{
public:
	ns2__ArrayOfViewer *ActiveViewers;	/* optional element of type ns2:ArrayOfViewer */
public:
	virtual int soap_type() const { return 59; } /* = unique type id SOAP_TYPE_ns2__GetActiveViewersResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GetActiveViewersResult() { ns2__GetActiveViewersResult::soap_default(NULL); }
	virtual ~ns2__GetActiveViewersResult() { }
};
#endif

#ifndef SOAP_TYPE_ns2__NoActiveViewersFault
#define SOAP_TYPE_ns2__NoActiveViewersFault (60)
/* Primitive ns2:NoActiveViewersFault schema type: */
class SOAP_CMAC ns2__NoActiveViewersFault : public xsd__anyType
{
public:
	virtual int soap_type() const { return 60; } /* = unique type id SOAP_TYPE_ns2__NoActiveViewersFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__NoActiveViewersFault() { ns2__NoActiveViewersFault::soap_default(NULL); }
	virtual ~ns2__NoActiveViewersFault() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GetViewerInfoRequest
#define SOAP_TYPE_ns2__GetViewerInfoRequest (61)
/* ns2:GetViewerInfoRequest */
class SOAP_CMAC ns2__GetViewerInfoRequest : public xsd__anyType
{
public:
	ns2__Viewer *Viewer;	/* optional element of type ns2:Viewer */
public:
	virtual int soap_type() const { return 61; } /* = unique type id SOAP_TYPE_ns2__GetViewerInfoRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GetViewerInfoRequest() { ns2__GetViewerInfoRequest::soap_default(NULL); }
	virtual ~ns2__GetViewerInfoRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GetViewerInfoResult
#define SOAP_TYPE_ns2__GetViewerInfoResult (62)
/* ns2:GetViewerInfoResult */
class SOAP_CMAC ns2__GetViewerInfoResult : public xsd__anyType
{
public:
	ns4__ArrayOfstring *AdditionalStudyInstanceUids;	/* optional element of type ns4:ArrayOfstring */
public:
	virtual int soap_type() const { return 62; } /* = unique type id SOAP_TYPE_ns2__GetViewerInfoResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GetViewerInfoResult() { ns2__GetViewerInfoResult::soap_default(NULL); }
	virtual ~ns2__GetViewerInfoResult() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ViewerNotFoundFault
#define SOAP_TYPE_ns2__ViewerNotFoundFault (63)
/* ns2:ViewerNotFoundFault */
class SOAP_CMAC ns2__ViewerNotFoundFault : public xsd__anyType
{
public:
	std::string *FailureDescription;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 63; } /* = unique type id SOAP_TYPE_ns2__ViewerNotFoundFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ViewerNotFoundFault() { ns2__ViewerNotFoundFault::soap_default(NULL); }
	virtual ~ns2__ViewerNotFoundFault() { }
};
#endif

#ifndef SOAP_TYPE_ns2__OpenStudiesRequest
#define SOAP_TYPE_ns2__OpenStudiesRequest (64)
/* ns2:OpenStudiesRequest */
class SOAP_CMAC ns2__OpenStudiesRequest : public xsd__anyType
{
public:
	bool *ActivateIfAlreadyOpen;	/* optional element of type xsd:boolean */
	bool *LoadPriors;	/* optional element of type xsd:boolean */
	bool *ReportFaultToUser;	/* optional element of type xsd:boolean */
	class ns2__ArrayOfOpenStudyInfo *StudiesToOpen;	/* optional element of type ns2:ArrayOfOpenStudyInfo */
public:
	virtual int soap_type() const { return 64; } /* = unique type id SOAP_TYPE_ns2__OpenStudiesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__OpenStudiesRequest() { ns2__OpenStudiesRequest::soap_default(NULL); }
	virtual ~ns2__OpenStudiesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ArrayOfOpenStudyInfo
#define SOAP_TYPE_ns2__ArrayOfOpenStudyInfo (65)
/* ns2:ArrayOfOpenStudyInfo */
class SOAP_CMAC ns2__ArrayOfOpenStudyInfo : public xsd__anyType
{
public:
	std::vector<class ns2__OpenStudyInfo * >OpenStudyInfo;	/* optional element of type ns2:OpenStudyInfo */
public:
	virtual int soap_type() const { return 65; } /* = unique type id SOAP_TYPE_ns2__ArrayOfOpenStudyInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ArrayOfOpenStudyInfo() { ns2__ArrayOfOpenStudyInfo::soap_default(NULL); }
	virtual ~ns2__ArrayOfOpenStudyInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns2__OpenStudyInfo
#define SOAP_TYPE_ns2__OpenStudyInfo (66)
/* ns2:OpenStudyInfo */
class SOAP_CMAC ns2__OpenStudyInfo : public xsd__anyType
{
public:
	std::string *SourceAETitle;	/* optional element of type xsd:string */
	std::string *StudyInstanceUid;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 66; } /* = unique type id SOAP_TYPE_ns2__OpenStudyInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__OpenStudyInfo() { ns2__OpenStudyInfo::soap_default(NULL); }
	virtual ~ns2__OpenStudyInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns2__OpenStudiesResult
#define SOAP_TYPE_ns2__OpenStudiesResult (67)
/* ns2:OpenStudiesResult */
class SOAP_CMAC ns2__OpenStudiesResult : public xsd__anyType
{
public:
	ns2__Viewer *Viewer;	/* optional element of type ns2:Viewer */
public:
	virtual int soap_type() const { return 67; } /* = unique type id SOAP_TYPE_ns2__OpenStudiesResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__OpenStudiesResult() { ns2__OpenStudiesResult::soap_default(NULL); }
	virtual ~ns2__OpenStudiesResult() { }
};
#endif

#ifndef SOAP_TYPE_ns2__OpenStudiesFault
#define SOAP_TYPE_ns2__OpenStudiesFault (68)
/* ns2:OpenStudiesFault */
class SOAP_CMAC ns2__OpenStudiesFault : public xsd__anyType
{
public:
	std::string *FailureDescription;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 68; } /* = unique type id SOAP_TYPE_ns2__OpenStudiesFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__OpenStudiesFault() { ns2__OpenStudiesFault::soap_default(NULL); }
	virtual ~ns2__OpenStudiesFault() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ActivateViewerRequest
#define SOAP_TYPE_ns2__ActivateViewerRequest (69)
/* ns2:ActivateViewerRequest */
class SOAP_CMAC ns2__ActivateViewerRequest : public xsd__anyType
{
public:
	ns2__Viewer *Viewer;	/* optional element of type ns2:Viewer */
public:
	virtual int soap_type() const { return 69; } /* = unique type id SOAP_TYPE_ns2__ActivateViewerRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ActivateViewerRequest() { ns2__ActivateViewerRequest::soap_default(NULL); }
	virtual ~ns2__ActivateViewerRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns2__CloseViewerRequest
#define SOAP_TYPE_ns2__CloseViewerRequest (70)
/* ns2:CloseViewerRequest */
class SOAP_CMAC ns2__CloseViewerRequest : public xsd__anyType
{
public:
	ns2__Viewer *Viewer;	/* optional element of type ns2:Viewer */
public:
	virtual int soap_type() const { return 70; } /* = unique type id SOAP_TYPE_ns2__CloseViewerRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__CloseViewerRequest() { ns2__CloseViewerRequest::soap_default(NULL); }
	virtual ~ns2__CloseViewerRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns2__OpenFiles
#define SOAP_TYPE__ns2__OpenFiles (71)
/* ns2:OpenFiles */
class SOAP_CMAC _ns2__OpenFiles
{
public:
	ns2__OpenFilesRequest *request;	/* optional element of type ns2:OpenFilesRequest */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 71; } /* = unique type id SOAP_TYPE__ns2__OpenFiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__OpenFiles() { _ns2__OpenFiles::soap_default(NULL); }
	virtual ~_ns2__OpenFiles() { }
};
#endif

#ifndef SOAP_TYPE__ns2__OpenFilesResponse
#define SOAP_TYPE__ns2__OpenFilesResponse (72)
/* ns2:OpenFilesResponse */
class SOAP_CMAC _ns2__OpenFilesResponse
{
public:
	ns2__OpenFilesResult *OpenFilesResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:OpenFilesResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique type id SOAP_TYPE__ns2__OpenFilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__OpenFilesResponse() { _ns2__OpenFilesResponse::soap_default(NULL); }
	virtual ~_ns2__OpenFilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__GetViewers
#define SOAP_TYPE__ns2__GetViewers (73)
/* ns2:GetViewers */
class SOAP_CMAC _ns2__GetViewers
{
public:
	ns2__GetViewersRequest *request;	/* optional element of type ns2:GetViewersRequest */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 73; } /* = unique type id SOAP_TYPE__ns2__GetViewers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__GetViewers() { _ns2__GetViewers::soap_default(NULL); }
	virtual ~_ns2__GetViewers() { }
};
#endif

#ifndef SOAP_TYPE__ns2__GetViewersResponse
#define SOAP_TYPE__ns2__GetViewersResponse (74)
/* ns2:GetViewersResponse */
class SOAP_CMAC _ns2__GetViewersResponse
{
public:
	ns2__GetViewersResult *GetViewersResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:GetViewersResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique type id SOAP_TYPE__ns2__GetViewersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__GetViewersResponse() { _ns2__GetViewersResponse::soap_default(NULL); }
	virtual ~_ns2__GetViewersResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__GetActiveViewers
#define SOAP_TYPE__ns2__GetActiveViewers (75)
/* ns2:GetActiveViewers */
class SOAP_CMAC _ns2__GetActiveViewers
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique type id SOAP_TYPE__ns2__GetActiveViewers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__GetActiveViewers() { _ns2__GetActiveViewers::soap_default(NULL); }
	virtual ~_ns2__GetActiveViewers() { }
};
#endif

#ifndef SOAP_TYPE__ns2__GetActiveViewersResponse
#define SOAP_TYPE__ns2__GetActiveViewersResponse (76)
/* ns2:GetActiveViewersResponse */
class SOAP_CMAC _ns2__GetActiveViewersResponse
{
public:
	ns2__GetActiveViewersResult *GetActiveViewersResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:GetActiveViewersResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique type id SOAP_TYPE__ns2__GetActiveViewersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__GetActiveViewersResponse() { _ns2__GetActiveViewersResponse::soap_default(NULL); }
	virtual ~_ns2__GetActiveViewersResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__GetViewerInfo
#define SOAP_TYPE__ns2__GetViewerInfo (77)
/* ns2:GetViewerInfo */
class SOAP_CMAC _ns2__GetViewerInfo
{
public:
	ns2__GetViewerInfoRequest *request;	/* optional element of type ns2:GetViewerInfoRequest */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique type id SOAP_TYPE__ns2__GetViewerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__GetViewerInfo() { _ns2__GetViewerInfo::soap_default(NULL); }
	virtual ~_ns2__GetViewerInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns2__GetViewerInfoResponse
#define SOAP_TYPE__ns2__GetViewerInfoResponse (78)
/* ns2:GetViewerInfoResponse */
class SOAP_CMAC _ns2__GetViewerInfoResponse
{
public:
	ns2__GetViewerInfoResult *GetViewerInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:GetViewerInfoResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 78; } /* = unique type id SOAP_TYPE__ns2__GetViewerInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__GetViewerInfoResponse() { _ns2__GetViewerInfoResponse::soap_default(NULL); }
	virtual ~_ns2__GetViewerInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__OpenStudies
#define SOAP_TYPE__ns2__OpenStudies (79)
/* ns2:OpenStudies */
class SOAP_CMAC _ns2__OpenStudies
{
public:
	ns2__OpenStudiesRequest *request;	/* optional element of type ns2:OpenStudiesRequest */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique type id SOAP_TYPE__ns2__OpenStudies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__OpenStudies() { _ns2__OpenStudies::soap_default(NULL); }
	virtual ~_ns2__OpenStudies() { }
};
#endif

#ifndef SOAP_TYPE__ns2__OpenStudiesResponse
#define SOAP_TYPE__ns2__OpenStudiesResponse (80)
/* ns2:OpenStudiesResponse */
class SOAP_CMAC _ns2__OpenStudiesResponse
{
public:
	ns2__OpenStudiesResult *OpenStudiesResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:OpenStudiesResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 80; } /* = unique type id SOAP_TYPE__ns2__OpenStudiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__OpenStudiesResponse() { _ns2__OpenStudiesResponse::soap_default(NULL); }
	virtual ~_ns2__OpenStudiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__ActivateViewer
#define SOAP_TYPE__ns2__ActivateViewer (81)
/* ns2:ActivateViewer */
class SOAP_CMAC _ns2__ActivateViewer
{
public:
	ns2__ActivateViewerRequest *request;	/* optional element of type ns2:ActivateViewerRequest */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 81; } /* = unique type id SOAP_TYPE__ns2__ActivateViewer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__ActivateViewer() { _ns2__ActivateViewer::soap_default(NULL); }
	virtual ~_ns2__ActivateViewer() { }
};
#endif

#ifndef SOAP_TYPE__ns2__ActivateViewerResponse
#define SOAP_TYPE__ns2__ActivateViewerResponse (82)
/* ns2:ActivateViewerResponse */
class SOAP_CMAC _ns2__ActivateViewerResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 82; } /* = unique type id SOAP_TYPE__ns2__ActivateViewerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__ActivateViewerResponse() { _ns2__ActivateViewerResponse::soap_default(NULL); }
	virtual ~_ns2__ActivateViewerResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__CloseViewer
#define SOAP_TYPE__ns2__CloseViewer (83)
/* ns2:CloseViewer */
class SOAP_CMAC _ns2__CloseViewer
{
public:
	ns2__CloseViewerRequest *request;	/* optional element of type ns2:CloseViewerRequest */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 83; } /* = unique type id SOAP_TYPE__ns2__CloseViewer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__CloseViewer() { _ns2__CloseViewer::soap_default(NULL); }
	virtual ~_ns2__CloseViewer() { }
};
#endif

#ifndef SOAP_TYPE__ns2__CloseViewerResponse
#define SOAP_TYPE__ns2__CloseViewerResponse (84)
/* ns2:CloseViewerResponse */
class SOAP_CMAC _ns2__CloseViewerResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 84; } /* = unique type id SOAP_TYPE__ns2__CloseViewerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__CloseViewerResponse() { _ns2__CloseViewerResponse::soap_default(NULL); }
	virtual ~_ns2__CloseViewerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfstring
#define SOAP_TYPE_ns4__ArrayOfstring (85)
/* ns4:ArrayOfstring */
class SOAP_CMAC ns4__ArrayOfstring : public xsd__anyType
{
public:
	std::vector<std::string >string;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 85; } /* = unique type id SOAP_TYPE_ns4__ArrayOfstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__ArrayOfstring() { ns4__ArrayOfstring::soap_default(NULL); }
	virtual ~ns4__ArrayOfstring() { }
};
#endif

#ifndef SOAP_TYPE_ns5__Identifier
#define SOAP_TYPE_ns5__Identifier (88)
/* ns5:Identifier */
class SOAP_CMAC ns5__Identifier : public xsd__anyType
{
public:
	std::string *InstanceAvailability;	/* optional element of type xsd:string */
	std::string *RetrieveAeTitle;	/* optional element of type xsd:string */
	std::string *SpecificCharacterSet;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 88; } /* = unique type id SOAP_TYPE_ns5__Identifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__Identifier() { ns5__Identifier::soap_default(NULL); }
	virtual ~ns5__Identifier() { }
};
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfStudyRootStudyIdentifier
#define SOAP_TYPE_ns5__ArrayOfStudyRootStudyIdentifier (89)
/* ns5:ArrayOfStudyRootStudyIdentifier */
class SOAP_CMAC ns5__ArrayOfStudyRootStudyIdentifier : public xsd__anyType
{
public:
	std::vector<ns5__StudyRootStudyIdentifier * >StudyRootStudyIdentifier;	/* optional element of type ns5:StudyRootStudyIdentifier */
public:
	virtual int soap_type() const { return 89; } /* = unique type id SOAP_TYPE_ns5__ArrayOfStudyRootStudyIdentifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ArrayOfStudyRootStudyIdentifier() { ns5__ArrayOfStudyRootStudyIdentifier::soap_default(NULL); }
	virtual ~ns5__ArrayOfStudyRootStudyIdentifier() { }
};
#endif

#ifndef SOAP_TYPE_ns5__QueryFailedFault
#define SOAP_TYPE_ns5__QueryFailedFault (90)
/* ns5:QueryFailedFault */
class SOAP_CMAC ns5__QueryFailedFault : public xsd__anyType
{
public:
	std::string *Description;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 90; } /* = unique type id SOAP_TYPE_ns5__QueryFailedFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__QueryFailedFault() { ns5__QueryFailedFault::soap_default(NULL); }
	virtual ~ns5__QueryFailedFault() { }
};
#endif

#ifndef SOAP_TYPE_ns5__DataValidationFault
#define SOAP_TYPE_ns5__DataValidationFault (91)
/* ns5:DataValidationFault */
class SOAP_CMAC ns5__DataValidationFault : public xsd__anyType
{
public:
	std::string *Description;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 91; } /* = unique type id SOAP_TYPE_ns5__DataValidationFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__DataValidationFault() { ns5__DataValidationFault::soap_default(NULL); }
	virtual ~ns5__DataValidationFault() { }
};
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfSeriesIdentifier
#define SOAP_TYPE_ns5__ArrayOfSeriesIdentifier (93)
/* ns5:ArrayOfSeriesIdentifier */
class SOAP_CMAC ns5__ArrayOfSeriesIdentifier : public xsd__anyType
{
public:
	std::vector<class ns5__SeriesIdentifier * >SeriesIdentifier;	/* optional element of type ns5:SeriesIdentifier */
public:
	virtual int soap_type() const { return 93; } /* = unique type id SOAP_TYPE_ns5__ArrayOfSeriesIdentifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ArrayOfSeriesIdentifier() { ns5__ArrayOfSeriesIdentifier::soap_default(NULL); }
	virtual ~ns5__ArrayOfSeriesIdentifier() { }
};
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfImageIdentifier
#define SOAP_TYPE_ns5__ArrayOfImageIdentifier (95)
/* ns5:ArrayOfImageIdentifier */
class SOAP_CMAC ns5__ArrayOfImageIdentifier : public xsd__anyType
{
public:
	std::vector<class ns5__ImageIdentifier * >ImageIdentifier;	/* optional element of type ns5:ImageIdentifier */
public:
	virtual int soap_type() const { return 95; } /* = unique type id SOAP_TYPE_ns5__ArrayOfImageIdentifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ArrayOfImageIdentifier() { ns5__ArrayOfImageIdentifier::soap_default(NULL); }
	virtual ~ns5__ArrayOfImageIdentifier() { }
};
#endif

#ifndef SOAP_TYPE__ns5__StudyQuery
#define SOAP_TYPE__ns5__StudyQuery (96)
/* ns5:StudyQuery */
class SOAP_CMAC _ns5__StudyQuery
{
public:
	ns5__StudyRootStudyIdentifier *queryCriteria;	/* optional element of type ns5:StudyRootStudyIdentifier */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 96; } /* = unique type id SOAP_TYPE__ns5__StudyQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__StudyQuery() { _ns5__StudyQuery::soap_default(NULL); }
	virtual ~_ns5__StudyQuery() { }
};
#endif

#ifndef SOAP_TYPE__ns5__StudyQueryResponse
#define SOAP_TYPE__ns5__StudyQueryResponse (97)
/* ns5:StudyQueryResponse */
class SOAP_CMAC _ns5__StudyQueryResponse
{
public:
	ns5__ArrayOfStudyRootStudyIdentifier *StudyQueryResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:ArrayOfStudyRootStudyIdentifier */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 97; } /* = unique type id SOAP_TYPE__ns5__StudyQueryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__StudyQueryResponse() { _ns5__StudyQueryResponse::soap_default(NULL); }
	virtual ~_ns5__StudyQueryResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__SeriesQuery
#define SOAP_TYPE__ns5__SeriesQuery (98)
/* ns5:SeriesQuery */
class SOAP_CMAC _ns5__SeriesQuery
{
public:
	ns5__SeriesIdentifier *queryCriteria;	/* optional element of type ns5:SeriesIdentifier */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 98; } /* = unique type id SOAP_TYPE__ns5__SeriesQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__SeriesQuery() { _ns5__SeriesQuery::soap_default(NULL); }
	virtual ~_ns5__SeriesQuery() { }
};
#endif

#ifndef SOAP_TYPE__ns5__SeriesQueryResponse
#define SOAP_TYPE__ns5__SeriesQueryResponse (99)
/* ns5:SeriesQueryResponse */
class SOAP_CMAC _ns5__SeriesQueryResponse
{
public:
	ns5__ArrayOfSeriesIdentifier *SeriesQueryResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:ArrayOfSeriesIdentifier */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 99; } /* = unique type id SOAP_TYPE__ns5__SeriesQueryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__SeriesQueryResponse() { _ns5__SeriesQueryResponse::soap_default(NULL); }
	virtual ~_ns5__SeriesQueryResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__ImageQuery
#define SOAP_TYPE__ns5__ImageQuery (100)
/* ns5:ImageQuery */
class SOAP_CMAC _ns5__ImageQuery
{
public:
	ns5__ImageIdentifier *queryCriteria;	/* optional element of type ns5:ImageIdentifier */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 100; } /* = unique type id SOAP_TYPE__ns5__ImageQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__ImageQuery() { _ns5__ImageQuery::soap_default(NULL); }
	virtual ~_ns5__ImageQuery() { }
};
#endif

#ifndef SOAP_TYPE__ns5__ImageQueryResponse
#define SOAP_TYPE__ns5__ImageQueryResponse (101)
/* ns5:ImageQueryResponse */
class SOAP_CMAC _ns5__ImageQueryResponse
{
public:
	ns5__ArrayOfImageIdentifier *ImageQueryResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:ArrayOfImageIdentifier */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 101; } /* = unique type id SOAP_TYPE__ns5__ImageQueryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__ImageQueryResponse() { _ns5__ImageQueryResponse::soap_default(NULL); }
	virtual ~_ns5__ImageQueryResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__StudyNearlineFault
#define SOAP_TYPE_ns6__StudyNearlineFault (102)
/* ns6:StudyNearlineFault */
class SOAP_CMAC ns6__StudyNearlineFault : public xsd__anyType
{
public:
	bool *IsStudyBeingRestored;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 102; } /* = unique type id SOAP_TYPE_ns6__StudyNearlineFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__StudyNearlineFault() { ns6__StudyNearlineFault::soap_default(NULL); }
	virtual ~ns6__StudyNearlineFault() { }
};
#endif

#ifndef SOAP_TYPE_ns6__StudyNotFoundFault
#define SOAP_TYPE_ns6__StudyNotFoundFault (103)
/* Primitive ns6:StudyNotFoundFault schema type: */
class SOAP_CMAC ns6__StudyNotFoundFault : public xsd__anyType
{
public:
	virtual int soap_type() const { return 103; } /* = unique type id SOAP_TYPE_ns6__StudyNotFoundFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__StudyNotFoundFault() { ns6__StudyNotFoundFault::soap_default(NULL); }
	virtual ~ns6__StudyNotFoundFault() { }
};
#endif

#ifndef SOAP_TYPE_ns6__StudyInUseFault
#define SOAP_TYPE_ns6__StudyInUseFault (104)
/* Primitive ns6:StudyInUseFault schema type: */
class SOAP_CMAC ns6__StudyInUseFault : public xsd__anyType
{
public:
	virtual int soap_type() const { return 104; } /* = unique type id SOAP_TYPE_ns6__StudyInUseFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__StudyInUseFault() { ns6__StudyInUseFault::soap_default(NULL); }
	virtual ~ns6__StudyInUseFault() { }
};
#endif

#ifndef SOAP_TYPE_ns6__StudyOfflineFault
#define SOAP_TYPE_ns6__StudyOfflineFault (105)
/* Primitive ns6:StudyOfflineFault schema type: */
class SOAP_CMAC ns6__StudyOfflineFault : public xsd__anyType
{
public:
	virtual int soap_type() const { return 105; } /* = unique type id SOAP_TYPE_ns6__StudyOfflineFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__StudyOfflineFault() { ns6__StudyOfflineFault::soap_default(NULL); }
	virtual ~ns6__StudyOfflineFault() { }
};
#endif

#ifndef SOAP_TYPE_ns5__StudyIdentifier
#define SOAP_TYPE_ns5__StudyIdentifier (87)
/* ns5:StudyIdentifier */
class SOAP_CMAC ns5__StudyIdentifier : public ns5__Identifier
{
public:
	std::string *AccessionNumber;	/* optional element of type xsd:string */
	ns4__ArrayOfstring *ModalitiesInStudy;	/* optional element of type ns4:ArrayOfstring */
	int *NumberOfStudyRelatedInstances;	/* optional element of type xsd:int */
	int *NumberOfStudyRelatedSeries;	/* optional element of type xsd:int */
	std::string *ReferringPhysiciansName;	/* optional element of type xsd:string */
	ns4__ArrayOfstring *SopClassesInStudy;	/* optional element of type ns4:ArrayOfstring */
	std::string *StudyDate;	/* optional element of type xsd:string */
	std::string *StudyDescription;	/* optional element of type xsd:string */
	std::string *StudyId;	/* optional element of type xsd:string */
	std::string *StudyInstanceUid;	/* optional element of type xsd:string */
	std::string *StudyTime;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 87; } /* = unique type id SOAP_TYPE_ns5__StudyIdentifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__StudyIdentifier() { ns5__StudyIdentifier::soap_default(NULL); }
	virtual ~ns5__StudyIdentifier() { }
};
#endif

#ifndef SOAP_TYPE_ns5__SeriesIdentifier
#define SOAP_TYPE_ns5__SeriesIdentifier (92)
/* ns5:SeriesIdentifier */
class SOAP_CMAC ns5__SeriesIdentifier : public ns5__Identifier
{
public:
	std::string *Modality;	/* optional element of type xsd:string */
	int *NumberOfSeriesRelatedInstances;	/* optional element of type xsd:int */
	std::string *SeriesDescription;	/* optional element of type xsd:string */
	std::string *SeriesInstanceUid;	/* optional element of type xsd:string */
	int *SeriesNumber;	/* optional element of type xsd:int */
	std::string *StudyInstanceUid;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 92; } /* = unique type id SOAP_TYPE_ns5__SeriesIdentifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__SeriesIdentifier() { ns5__SeriesIdentifier::soap_default(NULL); }
	virtual ~ns5__SeriesIdentifier() { }
};
#endif

#ifndef SOAP_TYPE_ns5__ImageIdentifier
#define SOAP_TYPE_ns5__ImageIdentifier (94)
/* ns5:ImageIdentifier */
class SOAP_CMAC ns5__ImageIdentifier : public ns5__Identifier
{
public:
	int *InstanceNumber;	/* optional element of type xsd:int */
	std::string *SeriesInstanceUid;	/* optional element of type xsd:string */
	std::string *SopClassUid;	/* optional element of type xsd:string */
	std::string *SopInstanceUid;	/* optional element of type xsd:string */
	std::string *StudyInstanceUid;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 94; } /* = unique type id SOAP_TYPE_ns5__ImageIdentifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ImageIdentifier() { ns5__ImageIdentifier::soap_default(NULL); }
	virtual ~ns5__ImageIdentifier() { }
};
#endif

#ifndef SOAP_TYPE_ns5__StudyRootStudyIdentifier
#define SOAP_TYPE_ns5__StudyRootStudyIdentifier (86)
/* ns5:StudyRootStudyIdentifier */
class SOAP_CMAC ns5__StudyRootStudyIdentifier : public ns5__StudyIdentifier
{
public:
	std::string *PatientBreedCodeSequenceCodeMeaning;	/* optional element of type xsd:string */
	std::string *PatientBreedCodeSequenceCodeValue;	/* optional element of type xsd:string */
	std::string *PatientBreedCodeSequenceCodingSchemeDesignator;	/* optional element of type xsd:string */
	std::string *PatientBreedDescription;	/* optional element of type xsd:string */
	std::string *PatientId;	/* optional element of type xsd:string */
	std::string *PatientSpeciesCodeSequenceCodeMeaning;	/* optional element of type xsd:string */
	std::string *PatientSpeciesCodeSequenceCodeValue;	/* optional element of type xsd:string */
	std::string *PatientSpeciesCodeSequenceCodingSchemeDesignator;	/* optional element of type xsd:string */
	std::string *PatientSpeciesDescription;	/* optional element of type xsd:string */
	std::string *PatientsBirthDate;	/* optional element of type xsd:string */
	std::string *PatientsBirthTime;	/* optional element of type xsd:string */
	std::string *PatientsName;	/* optional element of type xsd:string */
	std::string *PatientsSex;	/* optional element of type xsd:string */
	std::string *ResponsibleOrganization;	/* optional element of type xsd:string */
	std::string *ResponsiblePerson;	/* optional element of type xsd:string */
	std::string *ResponsiblePersonRole;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 86; } /* = unique type id SOAP_TYPE_ns5__StudyRootStudyIdentifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__StudyRootStudyIdentifier() { ns5__StudyRootStudyIdentifier::soap_default(NULL); }
	virtual ~ns5__StudyRootStudyIdentifier() { }
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (202)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	ns5__DataValidationFault *ns5__DataValidationFault_;	/* optional element of type ns5:DataValidationFault */
	ns5__QueryFailedFault *ns5__QueryFailedFault_;	/* optional element of type ns5:QueryFailedFault */
	ns2__ViewerNotFoundFault *ns2__ViewerNotFoundFault_;	/* optional element of type ns2:ViewerNotFoundFault */
	ns2__NoActiveViewersFault *ns2__NoActiveViewersFault_;	/* optional element of type ns2:NoActiveViewersFault */
	ns2__NoViewersFault *ns2__NoViewersFault_;	/* optional element of type ns2:NoViewersFault */
	ns2__OpenFilesFault *ns2__OpenFilesFault_;	/* optional element of type ns2:OpenFilesFault */
	ns2__OpenStudiesFault *ns2__OpenStudiesFault_;	/* optional element of type ns2:OpenStudiesFault */
	ns6__StudyInUseFault *ns6__StudyInUseFault_;	/* optional element of type ns6:StudyInUseFault */
	ns6__StudyNearlineFault *ns6__StudyNearlineFault_;	/* optional element of type ns6:StudyNearlineFault */
	ns6__StudyNotFoundFault *ns6__StudyNotFoundFault_;	/* optional element of type ns6:StudyNotFoundFault */
	ns6__StudyOfflineFault *ns6__StudyOfflineFault_;	/* optional element of type ns6:StudyOfflineFault */
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 202; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef SOAP_TYPE___ns2__OpenFiles
#define SOAP_TYPE___ns2__OpenFiles (219)
/* Operation wrapper: */
struct __ns2__OpenFiles
{
public:
	_ns2__OpenFiles *ns2__OpenFiles;	/* optional element of type ns2:OpenFiles */
public:
	int soap_type() const { return 219; } /* = unique type id SOAP_TYPE___ns2__OpenFiles */
};
#endif

#ifndef SOAP_TYPE___ns2__GetViewers
#define SOAP_TYPE___ns2__GetViewers (223)
/* Operation wrapper: */
struct __ns2__GetViewers
{
public:
	_ns2__GetViewers *ns2__GetViewers;	/* optional element of type ns2:GetViewers */
public:
	int soap_type() const { return 223; } /* = unique type id SOAP_TYPE___ns2__GetViewers */
};
#endif

#ifndef SOAP_TYPE___ns2__GetActiveViewers
#define SOAP_TYPE___ns2__GetActiveViewers (227)
/* Operation wrapper: */
struct __ns2__GetActiveViewers
{
public:
	_ns2__GetActiveViewers *ns2__GetActiveViewers;	/* optional element of type ns2:GetActiveViewers */
public:
	int soap_type() const { return 227; } /* = unique type id SOAP_TYPE___ns2__GetActiveViewers */
};
#endif

#ifndef SOAP_TYPE___ns2__GetViewerInfo
#define SOAP_TYPE___ns2__GetViewerInfo (231)
/* Operation wrapper: */
struct __ns2__GetViewerInfo
{
public:
	_ns2__GetViewerInfo *ns2__GetViewerInfo;	/* optional element of type ns2:GetViewerInfo */
public:
	int soap_type() const { return 231; } /* = unique type id SOAP_TYPE___ns2__GetViewerInfo */
};
#endif

#ifndef SOAP_TYPE___ns2__OpenStudies
#define SOAP_TYPE___ns2__OpenStudies (235)
/* Operation wrapper: */
struct __ns2__OpenStudies
{
public:
	_ns2__OpenStudies *ns2__OpenStudies;	/* optional element of type ns2:OpenStudies */
public:
	int soap_type() const { return 235; } /* = unique type id SOAP_TYPE___ns2__OpenStudies */
};
#endif

#ifndef SOAP_TYPE___ns2__ActivateViewer
#define SOAP_TYPE___ns2__ActivateViewer (239)
/* Operation wrapper: */
struct __ns2__ActivateViewer
{
public:
	_ns2__ActivateViewer *ns2__ActivateViewer;	/* optional element of type ns2:ActivateViewer */
public:
	int soap_type() const { return 239; } /* = unique type id SOAP_TYPE___ns2__ActivateViewer */
};
#endif

#ifndef SOAP_TYPE___ns2__CloseViewer
#define SOAP_TYPE___ns2__CloseViewer (243)
/* Operation wrapper: */
struct __ns2__CloseViewer
{
public:
	_ns2__CloseViewer *ns2__CloseViewer;	/* optional element of type ns2:CloseViewer */
public:
	int soap_type() const { return 243; } /* = unique type id SOAP_TYPE___ns2__CloseViewer */
};
#endif

#ifndef SOAP_TYPE___ns2__OpenFiles_
#define SOAP_TYPE___ns2__OpenFiles_ (245)
/* Operation wrapper: */
struct __ns2__OpenFiles_
{
public:
	_ns2__OpenFiles *ns2__OpenFiles;	/* optional element of type ns2:OpenFiles */
public:
	int soap_type() const { return 245; } /* = unique type id SOAP_TYPE___ns2__OpenFiles_ */
};
#endif

#ifndef SOAP_TYPE___ns2__GetViewers_
#define SOAP_TYPE___ns2__GetViewers_ (247)
/* Operation wrapper: */
struct __ns2__GetViewers_
{
public:
	_ns2__GetViewers *ns2__GetViewers;	/* optional element of type ns2:GetViewers */
public:
	int soap_type() const { return 247; } /* = unique type id SOAP_TYPE___ns2__GetViewers_ */
};
#endif

#ifndef SOAP_TYPE___ns2__GetActiveViewers_
#define SOAP_TYPE___ns2__GetActiveViewers_ (249)
/* Operation wrapper: */
struct __ns2__GetActiveViewers_
{
public:
	_ns2__GetActiveViewers *ns2__GetActiveViewers;	/* optional element of type ns2:GetActiveViewers */
public:
	int soap_type() const { return 249; } /* = unique type id SOAP_TYPE___ns2__GetActiveViewers_ */
};
#endif

#ifndef SOAP_TYPE___ns2__GetViewerInfo_
#define SOAP_TYPE___ns2__GetViewerInfo_ (251)
/* Operation wrapper: */
struct __ns2__GetViewerInfo_
{
public:
	_ns2__GetViewerInfo *ns2__GetViewerInfo;	/* optional element of type ns2:GetViewerInfo */
public:
	int soap_type() const { return 251; } /* = unique type id SOAP_TYPE___ns2__GetViewerInfo_ */
};
#endif

#ifndef SOAP_TYPE___ns2__OpenStudies_
#define SOAP_TYPE___ns2__OpenStudies_ (253)
/* Operation wrapper: */
struct __ns2__OpenStudies_
{
public:
	_ns2__OpenStudies *ns2__OpenStudies;	/* optional element of type ns2:OpenStudies */
public:
	int soap_type() const { return 253; } /* = unique type id SOAP_TYPE___ns2__OpenStudies_ */
};
#endif

#ifndef SOAP_TYPE___ns2__ActivateViewer_
#define SOAP_TYPE___ns2__ActivateViewer_ (255)
/* Operation wrapper: */
struct __ns2__ActivateViewer_
{
public:
	_ns2__ActivateViewer *ns2__ActivateViewer;	/* optional element of type ns2:ActivateViewer */
public:
	int soap_type() const { return 255; } /* = unique type id SOAP_TYPE___ns2__ActivateViewer_ */
};
#endif

#ifndef SOAP_TYPE___ns2__CloseViewer_
#define SOAP_TYPE___ns2__CloseViewer_ (257)
/* Operation wrapper: */
struct __ns2__CloseViewer_
{
public:
	_ns2__CloseViewer *ns2__CloseViewer;	/* optional element of type ns2:CloseViewer */
public:
	int soap_type() const { return 257; } /* = unique type id SOAP_TYPE___ns2__CloseViewer_ */
};
#endif

#ifndef SOAP_TYPE___ns2__OpenFiles__
#define SOAP_TYPE___ns2__OpenFiles__ (259)
/* Operation wrapper: */
struct __ns2__OpenFiles__
{
public:
	_ns2__OpenFiles *ns2__OpenFiles;	/* optional element of type ns2:OpenFiles */
public:
	int soap_type() const { return 259; } /* = unique type id SOAP_TYPE___ns2__OpenFiles__ */
};
#endif

#ifndef SOAP_TYPE___ns2__GetViewers__
#define SOAP_TYPE___ns2__GetViewers__ (261)
/* Operation wrapper: */
struct __ns2__GetViewers__
{
public:
	_ns2__GetViewers *ns2__GetViewers;	/* optional element of type ns2:GetViewers */
public:
	int soap_type() const { return 261; } /* = unique type id SOAP_TYPE___ns2__GetViewers__ */
};
#endif

#ifndef SOAP_TYPE___ns2__GetActiveViewers__
#define SOAP_TYPE___ns2__GetActiveViewers__ (263)
/* Operation wrapper: */
struct __ns2__GetActiveViewers__
{
public:
	_ns2__GetActiveViewers *ns2__GetActiveViewers;	/* optional element of type ns2:GetActiveViewers */
public:
	int soap_type() const { return 263; } /* = unique type id SOAP_TYPE___ns2__GetActiveViewers__ */
};
#endif

#ifndef SOAP_TYPE___ns2__GetViewerInfo__
#define SOAP_TYPE___ns2__GetViewerInfo__ (265)
/* Operation wrapper: */
struct __ns2__GetViewerInfo__
{
public:
	_ns2__GetViewerInfo *ns2__GetViewerInfo;	/* optional element of type ns2:GetViewerInfo */
public:
	int soap_type() const { return 265; } /* = unique type id SOAP_TYPE___ns2__GetViewerInfo__ */
};
#endif

#ifndef SOAP_TYPE___ns2__OpenStudies__
#define SOAP_TYPE___ns2__OpenStudies__ (267)
/* Operation wrapper: */
struct __ns2__OpenStudies__
{
public:
	_ns2__OpenStudies *ns2__OpenStudies;	/* optional element of type ns2:OpenStudies */
public:
	int soap_type() const { return 267; } /* = unique type id SOAP_TYPE___ns2__OpenStudies__ */
};
#endif

#ifndef SOAP_TYPE___ns2__ActivateViewer__
#define SOAP_TYPE___ns2__ActivateViewer__ (269)
/* Operation wrapper: */
struct __ns2__ActivateViewer__
{
public:
	_ns2__ActivateViewer *ns2__ActivateViewer;	/* optional element of type ns2:ActivateViewer */
public:
	int soap_type() const { return 269; } /* = unique type id SOAP_TYPE___ns2__ActivateViewer__ */
};
#endif

#ifndef SOAP_TYPE___ns2__CloseViewer__
#define SOAP_TYPE___ns2__CloseViewer__ (271)
/* Operation wrapper: */
struct __ns2__CloseViewer__
{
public:
	_ns2__CloseViewer *ns2__CloseViewer;	/* optional element of type ns2:CloseViewer */
public:
	int soap_type() const { return 271; } /* = unique type id SOAP_TYPE___ns2__CloseViewer__ */
};
#endif

#ifndef SOAP_TYPE___ns5__StudyQuery
#define SOAP_TYPE___ns5__StudyQuery (275)
/* Operation wrapper: */
struct __ns5__StudyQuery
{
public:
	_ns5__StudyQuery *ns5__StudyQuery;	/* optional element of type ns5:StudyQuery */
public:
	int soap_type() const { return 275; } /* = unique type id SOAP_TYPE___ns5__StudyQuery */
};
#endif

#ifndef SOAP_TYPE___ns5__SeriesQuery
#define SOAP_TYPE___ns5__SeriesQuery (279)
/* Operation wrapper: */
struct __ns5__SeriesQuery
{
public:
	_ns5__SeriesQuery *ns5__SeriesQuery;	/* optional element of type ns5:SeriesQuery */
public:
	int soap_type() const { return 279; } /* = unique type id SOAP_TYPE___ns5__SeriesQuery */
};
#endif

#ifndef SOAP_TYPE___ns5__ImageQuery
#define SOAP_TYPE___ns5__ImageQuery (283)
/* Operation wrapper: */
struct __ns5__ImageQuery
{
public:
	_ns5__ImageQuery *ns5__ImageQuery;	/* optional element of type ns5:ImageQuery */
public:
	int soap_type() const { return 283; } /* = unique type id SOAP_TYPE___ns5__ImageQuery */
};
#endif

#ifndef SOAP_TYPE___ns5__StudyQuery_
#define SOAP_TYPE___ns5__StudyQuery_ (285)
/* Operation wrapper: */
struct __ns5__StudyQuery_
{
public:
	_ns5__StudyQuery *ns5__StudyQuery;	/* optional element of type ns5:StudyQuery */
public:
	int soap_type() const { return 285; } /* = unique type id SOAP_TYPE___ns5__StudyQuery_ */
};
#endif

#ifndef SOAP_TYPE___ns5__SeriesQuery_
#define SOAP_TYPE___ns5__SeriesQuery_ (287)
/* Operation wrapper: */
struct __ns5__SeriesQuery_
{
public:
	_ns5__SeriesQuery *ns5__SeriesQuery;	/* optional element of type ns5:SeriesQuery */
public:
	int soap_type() const { return 287; } /* = unique type id SOAP_TYPE___ns5__SeriesQuery_ */
};
#endif

#ifndef SOAP_TYPE___ns5__ImageQuery_
#define SOAP_TYPE___ns5__ImageQuery_ (289)
/* Operation wrapper: */
struct __ns5__ImageQuery_
{
public:
	_ns5__ImageQuery *ns5__ImageQuery;	/* optional element of type ns5:ImageQuery */
public:
	int soap_type() const { return 289; } /* = unique type id SOAP_TYPE___ns5__ImageQuery_ */
};
#endif

#ifndef SOAP_TYPE___ns5__StudyQuery__
#define SOAP_TYPE___ns5__StudyQuery__ (291)
/* Operation wrapper: */
struct __ns5__StudyQuery__
{
public:
	_ns5__StudyQuery *ns5__StudyQuery;	/* optional element of type ns5:StudyQuery */
public:
	int soap_type() const { return 291; } /* = unique type id SOAP_TYPE___ns5__StudyQuery__ */
};
#endif

#ifndef SOAP_TYPE___ns5__SeriesQuery__
#define SOAP_TYPE___ns5__SeriesQuery__ (293)
/* Operation wrapper: */
struct __ns5__SeriesQuery__
{
public:
	_ns5__SeriesQuery *ns5__SeriesQuery;	/* optional element of type ns5:SeriesQuery */
public:
	int soap_type() const { return 293; } /* = unique type id SOAP_TYPE___ns5__SeriesQuery__ */
};
#endif

#ifndef SOAP_TYPE___ns5__ImageQuery__
#define SOAP_TYPE___ns5__ImageQuery__ (295)
/* Operation wrapper: */
struct __ns5__ImageQuery__
{
public:
	_ns5__ImageQuery *ns5__ImageQuery;	/* optional element of type ns5:ImageQuery */
public:
	int soap_type() const { return 295; } /* = unique type id SOAP_TYPE___ns5__ImageQuery__ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (296)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 296; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (297)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 297; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (299)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 299; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (300)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 300; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (16)
typedef char xsd__byte;
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (17)
typedef unsigned char xsd__unsignedByte;
#endif

#ifndef SOAP_TYPE_xsd__ID
#define SOAP_TYPE_xsd__ID (18)
typedef std::string xsd__ID;
#endif

#ifndef SOAP_TYPE_xsd__IDREF
#define SOAP_TYPE_xsd__IDREF (20)
typedef std::string xsd__IDREF;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (23)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (31)
typedef std::string xsd__decimal;
#endif

#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (35)
typedef std::string xsd__duration;
#endif

#ifndef SOAP_TYPE_ns3__char
#define SOAP_TYPE_ns3__char (106)
typedef int ns3__char;
#endif

#ifndef SOAP_TYPE_ns3__duration
#define SOAP_TYPE_ns3__duration (108)
typedef std::string ns3__duration;
#endif

#ifndef SOAP_TYPE_ns3__guid
#define SOAP_TYPE_ns3__guid (110)
typedef std::string ns3__guid;
#endif

#ifndef SOAP_TYPE__ns2__OpenFilesRequest
#define SOAP_TYPE__ns2__OpenFilesRequest (143)
typedef ns2__OpenFilesRequest _ns2__OpenFilesRequest;
#endif

#ifndef SOAP_TYPE__ns2__OpenFilesResult
#define SOAP_TYPE__ns2__OpenFilesResult (144)
typedef ns2__OpenFilesResult _ns2__OpenFilesResult;
#endif

#ifndef SOAP_TYPE__ns2__Viewer
#define SOAP_TYPE__ns2__Viewer (145)
typedef ns2__Viewer _ns2__Viewer;
#endif

#ifndef SOAP_TYPE__ns2__OpenFilesFault
#define SOAP_TYPE__ns2__OpenFilesFault (146)
typedef ns2__OpenFilesFault _ns2__OpenFilesFault;
#endif

#ifndef SOAP_TYPE__ns2__GetViewersRequest
#define SOAP_TYPE__ns2__GetViewersRequest (147)
typedef ns2__GetViewersRequest _ns2__GetViewersRequest;
#endif

#ifndef SOAP_TYPE__ns2__GetViewersResult
#define SOAP_TYPE__ns2__GetViewersResult (148)
typedef ns2__GetViewersResult _ns2__GetViewersResult;
#endif

#ifndef SOAP_TYPE__ns2__ArrayOfViewer
#define SOAP_TYPE__ns2__ArrayOfViewer (149)
typedef ns2__ArrayOfViewer _ns2__ArrayOfViewer;
#endif

#ifndef SOAP_TYPE__ns2__NoViewersFault
#define SOAP_TYPE__ns2__NoViewersFault (150)
typedef ns2__NoViewersFault _ns2__NoViewersFault;
#endif

#ifndef SOAP_TYPE__ns2__GetActiveViewersResult
#define SOAP_TYPE__ns2__GetActiveViewersResult (151)
typedef ns2__GetActiveViewersResult _ns2__GetActiveViewersResult;
#endif

#ifndef SOAP_TYPE__ns2__NoActiveViewersFault
#define SOAP_TYPE__ns2__NoActiveViewersFault (152)
typedef ns2__NoActiveViewersFault _ns2__NoActiveViewersFault;
#endif

#ifndef SOAP_TYPE__ns2__GetViewerInfoRequest
#define SOAP_TYPE__ns2__GetViewerInfoRequest (153)
typedef ns2__GetViewerInfoRequest _ns2__GetViewerInfoRequest;
#endif

#ifndef SOAP_TYPE__ns2__GetViewerInfoResult
#define SOAP_TYPE__ns2__GetViewerInfoResult (154)
typedef ns2__GetViewerInfoResult _ns2__GetViewerInfoResult;
#endif

#ifndef SOAP_TYPE__ns2__ViewerNotFoundFault
#define SOAP_TYPE__ns2__ViewerNotFoundFault (155)
typedef ns2__ViewerNotFoundFault _ns2__ViewerNotFoundFault;
#endif

#ifndef SOAP_TYPE__ns2__OpenStudiesRequest
#define SOAP_TYPE__ns2__OpenStudiesRequest (156)
typedef ns2__OpenStudiesRequest _ns2__OpenStudiesRequest;
#endif

#ifndef SOAP_TYPE__ns2__ArrayOfOpenStudyInfo
#define SOAP_TYPE__ns2__ArrayOfOpenStudyInfo (157)
typedef ns2__ArrayOfOpenStudyInfo _ns2__ArrayOfOpenStudyInfo;
#endif

#ifndef SOAP_TYPE__ns2__OpenStudyInfo
#define SOAP_TYPE__ns2__OpenStudyInfo (158)
typedef ns2__OpenStudyInfo _ns2__OpenStudyInfo;
#endif

#ifndef SOAP_TYPE__ns2__OpenStudiesResult
#define SOAP_TYPE__ns2__OpenStudiesResult (159)
typedef ns2__OpenStudiesResult _ns2__OpenStudiesResult;
#endif

#ifndef SOAP_TYPE__ns2__OpenStudiesFault
#define SOAP_TYPE__ns2__OpenStudiesFault (160)
typedef ns2__OpenStudiesFault _ns2__OpenStudiesFault;
#endif

#ifndef SOAP_TYPE__ns2__ActivateViewerRequest
#define SOAP_TYPE__ns2__ActivateViewerRequest (161)
typedef ns2__ActivateViewerRequest _ns2__ActivateViewerRequest;
#endif

#ifndef SOAP_TYPE__ns2__CloseViewerRequest
#define SOAP_TYPE__ns2__CloseViewerRequest (162)
typedef ns2__CloseViewerRequest _ns2__CloseViewerRequest;
#endif

#ifndef SOAP_TYPE__ns3__anyType
#define SOAP_TYPE__ns3__anyType (163)
typedef xsd__anyType _ns3__anyType;
#endif

#ifndef SOAP_TYPE__ns3__anyURI
#define SOAP_TYPE__ns3__anyURI (164)
typedef std::string _ns3__anyURI;
#endif

#ifndef SOAP_TYPE__ns3__base64Binary
#define SOAP_TYPE__ns3__base64Binary (165)
typedef xsd__base64Binary _ns3__base64Binary;
#endif

#ifndef SOAP_TYPE__ns3__boolean
#define SOAP_TYPE__ns3__boolean (166)
typedef bool _ns3__boolean;
#endif

#ifndef SOAP_TYPE__ns3__byte
#define SOAP_TYPE__ns3__byte (167)
typedef char _ns3__byte;
#endif

#ifndef SOAP_TYPE__ns3__dateTime
#define SOAP_TYPE__ns3__dateTime (168)
typedef time_t _ns3__dateTime;
#endif

#ifndef SOAP_TYPE__ns3__decimal
#define SOAP_TYPE__ns3__decimal (169)
typedef std::string _ns3__decimal;
#endif

#ifndef SOAP_TYPE__ns3__double
#define SOAP_TYPE__ns3__double (170)
typedef double _ns3__double;
#endif

#ifndef SOAP_TYPE__ns3__float
#define SOAP_TYPE__ns3__float (171)
typedef float _ns3__float;
#endif

#ifndef SOAP_TYPE__ns3__int
#define SOAP_TYPE__ns3__int (172)
typedef int _ns3__int;
#endif

#ifndef SOAP_TYPE__ns3__long
#define SOAP_TYPE__ns3__long (173)
typedef LONG64 _ns3__long;
#endif

#ifndef SOAP_TYPE__ns3__QName
#define SOAP_TYPE__ns3__QName (174)
typedef std::string _ns3__QName;
#endif

#ifndef SOAP_TYPE__ns3__short
#define SOAP_TYPE__ns3__short (175)
typedef short _ns3__short;
#endif

#ifndef SOAP_TYPE__ns3__string
#define SOAP_TYPE__ns3__string (176)
typedef std::string _ns3__string;
#endif

#ifndef SOAP_TYPE__ns3__unsignedByte
#define SOAP_TYPE__ns3__unsignedByte (177)
typedef unsigned char _ns3__unsignedByte;
#endif

#ifndef SOAP_TYPE__ns3__unsignedInt
#define SOAP_TYPE__ns3__unsignedInt (178)
typedef unsigned int _ns3__unsignedInt;
#endif

#ifndef SOAP_TYPE__ns3__unsignedLong
#define SOAP_TYPE__ns3__unsignedLong (179)
typedef ULONG64 _ns3__unsignedLong;
#endif

#ifndef SOAP_TYPE__ns3__unsignedShort
#define SOAP_TYPE__ns3__unsignedShort (180)
typedef unsigned short _ns3__unsignedShort;
#endif

#ifndef SOAP_TYPE__ns3__char
#define SOAP_TYPE__ns3__char (181)
typedef int _ns3__char;
#endif

#ifndef SOAP_TYPE__ns3__duration
#define SOAP_TYPE__ns3__duration (182)
typedef std::string _ns3__duration;
#endif

#ifndef SOAP_TYPE__ns3__guid
#define SOAP_TYPE__ns3__guid (183)
typedef std::string _ns3__guid;
#endif

#ifndef SOAP_TYPE__ns3__FactoryType
#define SOAP_TYPE__ns3__FactoryType (184)
typedef std::string _ns3__FactoryType;
#endif

#ifndef SOAP_TYPE__ns3__Id
#define SOAP_TYPE__ns3__Id (185)
typedef std::string _ns3__Id;
#endif

#ifndef SOAP_TYPE__ns3__Ref
#define SOAP_TYPE__ns3__Ref (186)
typedef std::string _ns3__Ref;
#endif

#ifndef SOAP_TYPE__ns4__ArrayOfstring
#define SOAP_TYPE__ns4__ArrayOfstring (187)
typedef ns4__ArrayOfstring _ns4__ArrayOfstring;
#endif

#ifndef SOAP_TYPE__ns5__StudyRootStudyIdentifier
#define SOAP_TYPE__ns5__StudyRootStudyIdentifier (188)
typedef ns5__StudyRootStudyIdentifier _ns5__StudyRootStudyIdentifier;
#endif

#ifndef SOAP_TYPE__ns5__StudyIdentifier
#define SOAP_TYPE__ns5__StudyIdentifier (189)
typedef ns5__StudyIdentifier _ns5__StudyIdentifier;
#endif

#ifndef SOAP_TYPE__ns5__Identifier
#define SOAP_TYPE__ns5__Identifier (190)
typedef ns5__Identifier _ns5__Identifier;
#endif

#ifndef SOAP_TYPE__ns5__ArrayOfStudyRootStudyIdentifier
#define SOAP_TYPE__ns5__ArrayOfStudyRootStudyIdentifier (191)
typedef ns5__ArrayOfStudyRootStudyIdentifier _ns5__ArrayOfStudyRootStudyIdentifier;
#endif

#ifndef SOAP_TYPE__ns5__QueryFailedFault
#define SOAP_TYPE__ns5__QueryFailedFault (192)
typedef ns5__QueryFailedFault _ns5__QueryFailedFault;
#endif

#ifndef SOAP_TYPE__ns5__DataValidationFault
#define SOAP_TYPE__ns5__DataValidationFault (193)
typedef ns5__DataValidationFault _ns5__DataValidationFault;
#endif

#ifndef SOAP_TYPE__ns5__SeriesIdentifier
#define SOAP_TYPE__ns5__SeriesIdentifier (194)
typedef ns5__SeriesIdentifier _ns5__SeriesIdentifier;
#endif

#ifndef SOAP_TYPE__ns5__ArrayOfSeriesIdentifier
#define SOAP_TYPE__ns5__ArrayOfSeriesIdentifier (195)
typedef ns5__ArrayOfSeriesIdentifier _ns5__ArrayOfSeriesIdentifier;
#endif

#ifndef SOAP_TYPE__ns5__ImageIdentifier
#define SOAP_TYPE__ns5__ImageIdentifier (196)
typedef ns5__ImageIdentifier _ns5__ImageIdentifier;
#endif

#ifndef SOAP_TYPE__ns5__ArrayOfImageIdentifier
#define SOAP_TYPE__ns5__ArrayOfImageIdentifier (197)
typedef ns5__ArrayOfImageIdentifier _ns5__ArrayOfImageIdentifier;
#endif

#ifndef SOAP_TYPE__ns6__StudyNearlineFault
#define SOAP_TYPE__ns6__StudyNearlineFault (198)
typedef ns6__StudyNearlineFault _ns6__StudyNearlineFault;
#endif

#ifndef SOAP_TYPE__ns6__StudyNotFoundFault
#define SOAP_TYPE__ns6__StudyNotFoundFault (199)
typedef ns6__StudyNotFoundFault _ns6__StudyNotFoundFault;
#endif

#ifndef SOAP_TYPE__ns6__StudyInUseFault
#define SOAP_TYPE__ns6__StudyInUseFault (200)
typedef ns6__StudyInUseFault _ns6__StudyInUseFault;
#endif

#ifndef SOAP_TYPE__ns6__StudyOfflineFault
#define SOAP_TYPE__ns6__StudyOfflineFault (201)
typedef ns6__StudyOfflineFault _ns6__StudyOfflineFault;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
