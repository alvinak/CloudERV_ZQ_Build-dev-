/* soapViewerAutomationProxy.cpp
   Generated by gSOAP 2.8.17r from ImageViewerAutomation.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapViewerAutomationProxy.h"

ViewerAutomationProxy::ViewerAutomationProxy()
{	ViewerAutomationProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ViewerAutomationProxy::ViewerAutomationProxy(const struct soap &_soap) : soap(_soap)
{ }

ViewerAutomationProxy::ViewerAutomationProxy(const char *url)
{	ViewerAutomationProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

ViewerAutomationProxy::ViewerAutomationProxy(soap_mode iomode)
{	ViewerAutomationProxy_init(iomode, iomode);
}

ViewerAutomationProxy::ViewerAutomationProxy(const char *url, soap_mode iomode)
{	ViewerAutomationProxy_init(iomode, iomode);
	soap_endpoint = url;
}

ViewerAutomationProxy::ViewerAutomationProxy(soap_mode imode, soap_mode omode)
{	ViewerAutomationProxy_init(imode, omode);
}

ViewerAutomationProxy::~ViewerAutomationProxy()
{ }

void ViewerAutomationProxy::ViewerAutomationProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns3", "http://schemas.microsoft.com/2003/10/Serialization/", NULL, NULL},
	{"ns4", "http://schemas.microsoft.com/2003/10/Serialization/Arrays", NULL, NULL},
	{"ns6", "http://www.Zhoban.com/dicom", NULL, NULL},
	{"ns2", "http://www.Zhoban.com/imageViewer/automation", NULL, NULL},
	{"ns5", "http://www.Zhoban.com/dicom/query", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void ViewerAutomationProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ViewerAutomationProxy::reset()
{	destroy();
	soap_done(this);
	soap_initialize(this);
	ViewerAutomationProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ViewerAutomationProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *ViewerAutomationProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *ViewerAutomationProxy::soap_fault()
{	return this->fault;
}

const char *ViewerAutomationProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *ViewerAutomationProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int ViewerAutomationProxy::soap_close_socket()
{	return soap_closesock(this);
}

int ViewerAutomationProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void ViewerAutomationProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ViewerAutomationProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *ViewerAutomationProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int ViewerAutomationProxy::OpenFiles(const char *endpoint, const char *soap_action, _ns2__OpenFiles *ns2__OpenFiles, _ns2__OpenFilesResponse *ns2__OpenFilesResponse)
{	struct soap *soap = this;
	struct __ns2__OpenFiles soap_tmp___ns2__OpenFiles;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/OpenFiles";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__OpenFiles.ns2__OpenFiles = ns2__OpenFiles;
	soap_serializeheader(soap);
	soap_serialize___ns2__OpenFiles(soap, &soap_tmp___ns2__OpenFiles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__OpenFiles(soap, &soap_tmp___ns2__OpenFiles, "-ns2:OpenFiles", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__OpenFiles(soap, &soap_tmp___ns2__OpenFiles, "-ns2:OpenFiles", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__OpenFilesResponse)
		return soap_closesock(soap);
	ns2__OpenFilesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__OpenFilesResponse->soap_get(soap, "ns2:OpenFilesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::GetViewers(const char *endpoint, const char *soap_action, _ns2__GetViewers *ns2__GetViewers, _ns2__GetViewersResponse *ns2__GetViewersResponse)
{	struct soap *soap = this;
	struct __ns2__GetViewers soap_tmp___ns2__GetViewers;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/GetViewers";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetViewers.ns2__GetViewers = ns2__GetViewers;
	soap_serializeheader(soap);
	soap_serialize___ns2__GetViewers(soap, &soap_tmp___ns2__GetViewers);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__GetViewers(soap, &soap_tmp___ns2__GetViewers, "-ns2:GetViewers", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__GetViewers(soap, &soap_tmp___ns2__GetViewers, "-ns2:GetViewers", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__GetViewersResponse)
		return soap_closesock(soap);
	ns2__GetViewersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetViewersResponse->soap_get(soap, "ns2:GetViewersResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::GetActiveViewers(const char *endpoint, const char *soap_action, _ns2__GetActiveViewers *ns2__GetActiveViewers, _ns2__GetActiveViewersResponse *ns2__GetActiveViewersResponse)
{	struct soap *soap = this;
	struct __ns2__GetActiveViewers soap_tmp___ns2__GetActiveViewers;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/GetActiveViewers";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetActiveViewers.ns2__GetActiveViewers = ns2__GetActiveViewers;
	soap_serializeheader(soap);
	soap_serialize___ns2__GetActiveViewers(soap, &soap_tmp___ns2__GetActiveViewers);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__GetActiveViewers(soap, &soap_tmp___ns2__GetActiveViewers, "-ns2:GetActiveViewers", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__GetActiveViewers(soap, &soap_tmp___ns2__GetActiveViewers, "-ns2:GetActiveViewers", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__GetActiveViewersResponse)
		return soap_closesock(soap);
	ns2__GetActiveViewersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetActiveViewersResponse->soap_get(soap, "ns2:GetActiveViewersResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::GetViewerInfo(const char *endpoint, const char *soap_action, _ns2__GetViewerInfo *ns2__GetViewerInfo, _ns2__GetViewerInfoResponse *ns2__GetViewerInfoResponse)
{	struct soap *soap = this;
	struct __ns2__GetViewerInfo soap_tmp___ns2__GetViewerInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/GetViewerInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetViewerInfo.ns2__GetViewerInfo = ns2__GetViewerInfo;
	soap_serializeheader(soap);
	soap_serialize___ns2__GetViewerInfo(soap, &soap_tmp___ns2__GetViewerInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__GetViewerInfo(soap, &soap_tmp___ns2__GetViewerInfo, "-ns2:GetViewerInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__GetViewerInfo(soap, &soap_tmp___ns2__GetViewerInfo, "-ns2:GetViewerInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__GetViewerInfoResponse)
		return soap_closesock(soap);
	ns2__GetViewerInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetViewerInfoResponse->soap_get(soap, "ns2:GetViewerInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::OpenStudies(const char *endpoint, const char *soap_action, _ns2__OpenStudies *ns2__OpenStudies, _ns2__OpenStudiesResponse *ns2__OpenStudiesResponse)
{	struct soap *soap = this;
	struct __ns2__OpenStudies soap_tmp___ns2__OpenStudies;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/OpenStudies";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__OpenStudies.ns2__OpenStudies = ns2__OpenStudies;
	soap_serializeheader(soap);
	soap_serialize___ns2__OpenStudies(soap, &soap_tmp___ns2__OpenStudies);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__OpenStudies(soap, &soap_tmp___ns2__OpenStudies, "-ns2:OpenStudies", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__OpenStudies(soap, &soap_tmp___ns2__OpenStudies, "-ns2:OpenStudies", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__OpenStudiesResponse)
		return soap_closesock(soap);
	ns2__OpenStudiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__OpenStudiesResponse->soap_get(soap, "ns2:OpenStudiesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::ActivateViewer(const char *endpoint, const char *soap_action, _ns2__ActivateViewer *ns2__ActivateViewer, _ns2__ActivateViewerResponse *ns2__ActivateViewerResponse)
{	struct soap *soap = this;
	struct __ns2__ActivateViewer soap_tmp___ns2__ActivateViewer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/ActivateViewer";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__ActivateViewer.ns2__ActivateViewer = ns2__ActivateViewer;
	soap_serializeheader(soap);
	soap_serialize___ns2__ActivateViewer(soap, &soap_tmp___ns2__ActivateViewer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__ActivateViewer(soap, &soap_tmp___ns2__ActivateViewer, "-ns2:ActivateViewer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__ActivateViewer(soap, &soap_tmp___ns2__ActivateViewer, "-ns2:ActivateViewer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__ActivateViewerResponse)
		return soap_closesock(soap);
	ns2__ActivateViewerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__ActivateViewerResponse->soap_get(soap, "ns2:ActivateViewerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::CloseViewer(const char *endpoint, const char *soap_action, _ns2__CloseViewer *ns2__CloseViewer, _ns2__CloseViewerResponse *ns2__CloseViewerResponse)
{	struct soap *soap = this;
	struct __ns2__CloseViewer soap_tmp___ns2__CloseViewer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/CloseViewer";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__CloseViewer.ns2__CloseViewer = ns2__CloseViewer;
	soap_serializeheader(soap);
	soap_serialize___ns2__CloseViewer(soap, &soap_tmp___ns2__CloseViewer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__CloseViewer(soap, &soap_tmp___ns2__CloseViewer, "-ns2:CloseViewer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__CloseViewer(soap, &soap_tmp___ns2__CloseViewer, "-ns2:CloseViewer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__CloseViewerResponse)
		return soap_closesock(soap);
	ns2__CloseViewerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__CloseViewerResponse->soap_get(soap, "ns2:CloseViewerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::OpenFiles_(const char *endpoint, const char *soap_action, _ns2__OpenFiles *ns2__OpenFiles, _ns2__OpenFilesResponse *ns2__OpenFilesResponse)
{	struct soap *soap = this;
	struct __ns2__OpenFiles_ soap_tmp___ns2__OpenFiles_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/OpenFiles";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__OpenFiles_.ns2__OpenFiles = ns2__OpenFiles;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__OpenFiles_(soap, &soap_tmp___ns2__OpenFiles_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__OpenFiles_(soap, &soap_tmp___ns2__OpenFiles_, "-ns2:OpenFiles", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__OpenFiles_(soap, &soap_tmp___ns2__OpenFiles_, "-ns2:OpenFiles", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__OpenFilesResponse)
		return soap_closesock(soap);
	ns2__OpenFilesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__OpenFilesResponse->soap_get(soap, "ns2:OpenFilesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::GetViewers_(const char *endpoint, const char *soap_action, _ns2__GetViewers *ns2__GetViewers, _ns2__GetViewersResponse *ns2__GetViewersResponse)
{	struct soap *soap = this;
	struct __ns2__GetViewers_ soap_tmp___ns2__GetViewers_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/GetViewers";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetViewers_.ns2__GetViewers = ns2__GetViewers;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__GetViewers_(soap, &soap_tmp___ns2__GetViewers_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__GetViewers_(soap, &soap_tmp___ns2__GetViewers_, "-ns2:GetViewers", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__GetViewers_(soap, &soap_tmp___ns2__GetViewers_, "-ns2:GetViewers", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__GetViewersResponse)
		return soap_closesock(soap);
	ns2__GetViewersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetViewersResponse->soap_get(soap, "ns2:GetViewersResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::GetActiveViewers_(const char *endpoint, const char *soap_action, _ns2__GetActiveViewers *ns2__GetActiveViewers, _ns2__GetActiveViewersResponse *ns2__GetActiveViewersResponse)
{	struct soap *soap = this;
	struct __ns2__GetActiveViewers_ soap_tmp___ns2__GetActiveViewers_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/GetActiveViewers";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetActiveViewers_.ns2__GetActiveViewers = ns2__GetActiveViewers;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__GetActiveViewers_(soap, &soap_tmp___ns2__GetActiveViewers_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__GetActiveViewers_(soap, &soap_tmp___ns2__GetActiveViewers_, "-ns2:GetActiveViewers", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__GetActiveViewers_(soap, &soap_tmp___ns2__GetActiveViewers_, "-ns2:GetActiveViewers", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__GetActiveViewersResponse)
		return soap_closesock(soap);
	ns2__GetActiveViewersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetActiveViewersResponse->soap_get(soap, "ns2:GetActiveViewersResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::GetViewerInfo_(const char *endpoint, const char *soap_action, _ns2__GetViewerInfo *ns2__GetViewerInfo, _ns2__GetViewerInfoResponse *ns2__GetViewerInfoResponse)
{	struct soap *soap = this;
	struct __ns2__GetViewerInfo_ soap_tmp___ns2__GetViewerInfo_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/GetViewerInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetViewerInfo_.ns2__GetViewerInfo = ns2__GetViewerInfo;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__GetViewerInfo_(soap, &soap_tmp___ns2__GetViewerInfo_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__GetViewerInfo_(soap, &soap_tmp___ns2__GetViewerInfo_, "-ns2:GetViewerInfo", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__GetViewerInfo_(soap, &soap_tmp___ns2__GetViewerInfo_, "-ns2:GetViewerInfo", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__GetViewerInfoResponse)
		return soap_closesock(soap);
	ns2__GetViewerInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetViewerInfoResponse->soap_get(soap, "ns2:GetViewerInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::OpenStudies_(const char *endpoint, const char *soap_action, _ns2__OpenStudies *ns2__OpenStudies, _ns2__OpenStudiesResponse *ns2__OpenStudiesResponse)
{	struct soap *soap = this;
	struct __ns2__OpenStudies_ soap_tmp___ns2__OpenStudies_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/OpenStudies";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__OpenStudies_.ns2__OpenStudies = ns2__OpenStudies;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__OpenStudies_(soap, &soap_tmp___ns2__OpenStudies_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__OpenStudies_(soap, &soap_tmp___ns2__OpenStudies_, "-ns2:OpenStudies", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__OpenStudies_(soap, &soap_tmp___ns2__OpenStudies_, "-ns2:OpenStudies", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__OpenStudiesResponse)
		return soap_closesock(soap);
	ns2__OpenStudiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__OpenStudiesResponse->soap_get(soap, "ns2:OpenStudiesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::ActivateViewer_(const char *endpoint, const char *soap_action, _ns2__ActivateViewer *ns2__ActivateViewer, _ns2__ActivateViewerResponse *ns2__ActivateViewerResponse)
{	struct soap *soap = this;
	struct __ns2__ActivateViewer_ soap_tmp___ns2__ActivateViewer_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/ActivateViewer";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__ActivateViewer_.ns2__ActivateViewer = ns2__ActivateViewer;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__ActivateViewer_(soap, &soap_tmp___ns2__ActivateViewer_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__ActivateViewer_(soap, &soap_tmp___ns2__ActivateViewer_, "-ns2:ActivateViewer", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__ActivateViewer_(soap, &soap_tmp___ns2__ActivateViewer_, "-ns2:ActivateViewer", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__ActivateViewerResponse)
		return soap_closesock(soap);
	ns2__ActivateViewerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__ActivateViewerResponse->soap_get(soap, "ns2:ActivateViewerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::CloseViewer_(const char *endpoint, const char *soap_action, _ns2__CloseViewer *ns2__CloseViewer, _ns2__CloseViewerResponse *ns2__CloseViewerResponse)
{	struct soap *soap = this;
	struct __ns2__CloseViewer_ soap_tmp___ns2__CloseViewer_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/CloseViewer";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__CloseViewer_.ns2__CloseViewer = ns2__CloseViewer;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__CloseViewer_(soap, &soap_tmp___ns2__CloseViewer_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__CloseViewer_(soap, &soap_tmp___ns2__CloseViewer_, "-ns2:CloseViewer", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__CloseViewer_(soap, &soap_tmp___ns2__CloseViewer_, "-ns2:CloseViewer", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__CloseViewerResponse)
		return soap_closesock(soap);
	ns2__CloseViewerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__CloseViewerResponse->soap_get(soap, "ns2:CloseViewerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::OpenFiles__(const char *endpoint, const char *soap_action, _ns2__OpenFiles *ns2__OpenFiles, _ns2__OpenFilesResponse *ns2__OpenFilesResponse)
{	struct soap *soap = this;
	struct __ns2__OpenFiles__ soap_tmp___ns2__OpenFiles__;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/OpenFiles";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__OpenFiles__.ns2__OpenFiles = ns2__OpenFiles;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__OpenFiles__(soap, &soap_tmp___ns2__OpenFiles__);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__OpenFiles__(soap, &soap_tmp___ns2__OpenFiles__, "-ns2:OpenFiles", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__OpenFiles__(soap, &soap_tmp___ns2__OpenFiles__, "-ns2:OpenFiles", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__OpenFilesResponse)
		return soap_closesock(soap);
	ns2__OpenFilesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__OpenFilesResponse->soap_get(soap, "ns2:OpenFilesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::GetViewers__(const char *endpoint, const char *soap_action, _ns2__GetViewers *ns2__GetViewers, _ns2__GetViewersResponse *ns2__GetViewersResponse)
{	struct soap *soap = this;
	struct __ns2__GetViewers__ soap_tmp___ns2__GetViewers__;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/GetViewers";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetViewers__.ns2__GetViewers = ns2__GetViewers;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__GetViewers__(soap, &soap_tmp___ns2__GetViewers__);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__GetViewers__(soap, &soap_tmp___ns2__GetViewers__, "-ns2:GetViewers", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__GetViewers__(soap, &soap_tmp___ns2__GetViewers__, "-ns2:GetViewers", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__GetViewersResponse)
		return soap_closesock(soap);
	ns2__GetViewersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetViewersResponse->soap_get(soap, "ns2:GetViewersResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::GetActiveViewers__(const char *endpoint, const char *soap_action, _ns2__GetActiveViewers *ns2__GetActiveViewers, _ns2__GetActiveViewersResponse *ns2__GetActiveViewersResponse)
{	struct soap *soap = this;
	struct __ns2__GetActiveViewers__ soap_tmp___ns2__GetActiveViewers__;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/GetActiveViewers";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetActiveViewers__.ns2__GetActiveViewers = ns2__GetActiveViewers;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__GetActiveViewers__(soap, &soap_tmp___ns2__GetActiveViewers__);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__GetActiveViewers__(soap, &soap_tmp___ns2__GetActiveViewers__, "-ns2:GetActiveViewers", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__GetActiveViewers__(soap, &soap_tmp___ns2__GetActiveViewers__, "-ns2:GetActiveViewers", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__GetActiveViewersResponse)
		return soap_closesock(soap);
	ns2__GetActiveViewersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetActiveViewersResponse->soap_get(soap, "ns2:GetActiveViewersResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::GetViewerInfo__(const char *endpoint, const char *soap_action, _ns2__GetViewerInfo *ns2__GetViewerInfo, _ns2__GetViewerInfoResponse *ns2__GetViewerInfoResponse)
{	struct soap *soap = this;
	struct __ns2__GetViewerInfo__ soap_tmp___ns2__GetViewerInfo__;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/GetViewerInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetViewerInfo__.ns2__GetViewerInfo = ns2__GetViewerInfo;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__GetViewerInfo__(soap, &soap_tmp___ns2__GetViewerInfo__);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__GetViewerInfo__(soap, &soap_tmp___ns2__GetViewerInfo__, "-ns2:GetViewerInfo", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__GetViewerInfo__(soap, &soap_tmp___ns2__GetViewerInfo__, "-ns2:GetViewerInfo", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__GetViewerInfoResponse)
		return soap_closesock(soap);
	ns2__GetViewerInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetViewerInfoResponse->soap_get(soap, "ns2:GetViewerInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::OpenStudies__(const char *endpoint, const char *soap_action, _ns2__OpenStudies *ns2__OpenStudies, _ns2__OpenStudiesResponse *ns2__OpenStudiesResponse)
{	struct soap *soap = this;
	struct __ns2__OpenStudies__ soap_tmp___ns2__OpenStudies__;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/OpenStudies";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__OpenStudies__.ns2__OpenStudies = ns2__OpenStudies;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__OpenStudies__(soap, &soap_tmp___ns2__OpenStudies__);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__OpenStudies__(soap, &soap_tmp___ns2__OpenStudies__, "-ns2:OpenStudies", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__OpenStudies__(soap, &soap_tmp___ns2__OpenStudies__, "-ns2:OpenStudies", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__OpenStudiesResponse)
		return soap_closesock(soap);
	ns2__OpenStudiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__OpenStudiesResponse->soap_get(soap, "ns2:OpenStudiesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::ActivateViewer__(const char *endpoint, const char *soap_action, _ns2__ActivateViewer *ns2__ActivateViewer, _ns2__ActivateViewerResponse *ns2__ActivateViewerResponse)
{	struct soap *soap = this;
	struct __ns2__ActivateViewer__ soap_tmp___ns2__ActivateViewer__;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/ActivateViewer";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__ActivateViewer__.ns2__ActivateViewer = ns2__ActivateViewer;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__ActivateViewer__(soap, &soap_tmp___ns2__ActivateViewer__);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__ActivateViewer__(soap, &soap_tmp___ns2__ActivateViewer__, "-ns2:ActivateViewer", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__ActivateViewer__(soap, &soap_tmp___ns2__ActivateViewer__, "-ns2:ActivateViewer", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__ActivateViewerResponse)
		return soap_closesock(soap);
	ns2__ActivateViewerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__ActivateViewerResponse->soap_get(soap, "ns2:ActivateViewerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ViewerAutomationProxy::CloseViewer__(const char *endpoint, const char *soap_action, _ns2__CloseViewer *ns2__CloseViewer, _ns2__CloseViewerResponse *ns2__CloseViewerResponse)
{	struct soap *soap = this;
	struct __ns2__CloseViewer__ soap_tmp___ns2__CloseViewer__;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:51124/CloudPACS/ImageViewer/Automation net.pipe://localhost/CloudPACS/ImageViewer/Automation net.tcp://localhost:51125/CloudPACS/ImageViewer/Automation";
	if (soap_action == NULL)
		soap_action = "http://www.Zhoban.com/imageViewer/automation/IViewerAutomation/CloseViewer";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns2__CloseViewer__.ns2__CloseViewer = ns2__CloseViewer;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___ns2__CloseViewer__(soap, &soap_tmp___ns2__CloseViewer__);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___ns2__CloseViewer__(soap, &soap_tmp___ns2__CloseViewer__, "-ns2:CloseViewer", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___ns2__CloseViewer__(soap, &soap_tmp___ns2__CloseViewer__, "-ns2:CloseViewer", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__CloseViewerResponse)
		return soap_closesock(soap);
	ns2__CloseViewerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__CloseViewerResponse->soap_get(soap, "ns2:CloseViewerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
